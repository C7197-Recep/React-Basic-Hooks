{"version":3,"sources":["ClassComponent.js","FunctionalComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ClassComponent","state","counter","increase","setState","console","log","className","this","onClick","React","Component","FunctionalComponent","inputRef","useRef","value","useState","setCounter","text","setText","useEffect","current","type","ref","onChange","e","target","parentElement","style","backgroundColor","App","isVisible","setVisible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAqDeA,E,4MAnCXC,MAAQ,CACJC,QAAS,G,EAiBbC,SAAW,WACP,EAAKC,SAAS,CAACF,QAAS,EAAKD,MAAMC,QAAU,K,uDAdjD,WACIG,QAAQC,IAAI,uB,gCAGhB,WACID,QAAQC,IAAI,wB,kCAGhB,WACID,QAAQC,IAAI,0B,oBAShB,WAAU,IAAD,OAEL,OACI,sBAAKC,UAAU,QAAf,UACI,iDACA,0CAAaC,KAAKP,MAAMC,WACxB,wBAAQO,QAAS,kBAAM,EAAKN,YAA5B,6B,GA7CaO,IAAMC,WCoEpBC,EApEa,WACxB,IAAMC,EAAWC,iBAAO,MAClBC,EAAQD,iBAAO,GACrBT,QAAQC,IAAI,QAASS,GAHS,MAMFC,mBAAS,GANP,mBAMzBd,EANyB,KAMhBe,EANgB,OAORD,mBAAS,IAPD,mBAOzBE,EAPyB,KAOnBC,EAPmB,KA4BhCC,qBAAU,WACRf,QAAQC,IAAI,eACZ,CAACJ,IASLG,QAAQC,IAAI,uBAgBV,OACE,sBAAKC,UAAU,WAAf,UACE,sDACA,0CAAaL,KACb,wBAAQO,QAAS,kBAAIQ,EAAWf,EAAQ,IAAxC,uBACA,wBAAQO,QAAS,kBAlBjBQ,EAAWf,EAAU,QACrBa,EAAMM,QAAUN,EAAMM,QAAU,IAiBhC,uBACA,uBACA,uBAAOC,KAAK,OAAOP,MAAOG,EAAOK,IAAKV,EAAUW,SAXjC,SAACC,GAChBN,EAAQM,EAAEC,OAAOX,UAWjB,wBAAQN,QAAS,kBAhBHI,EAASQ,QAAQN,WAC/BF,EAASQ,QAAQM,cAAcC,MAAMC,gBAAkBX,IAevD,0BCjDSY,MAXf,WAAgB,IAAD,EACmBd,oBAAS,GAD5B,mBACNe,EADM,KACKC,EADL,KAEb,OACE,sBAAKzB,UAAU,MAAf,UACG,wBAAQE,QAAS,kBAAMuB,GAAYD,IAAnC,oBACQ,cAAC,EAAD,IACRA,EAAY,cAAC,EAAD,IAA0B,SCC9BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.50c9197f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ClassComponent extends React.Component{\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state={\r\n    //         counter:0\r\n    //     }\r\n    //     this.increase=this.increase.bind(this);\r\n    // }\r\n    // increase(){\r\n    //     this.setState({counter:this.state.counter+1});\r\n    // }\r\n\r\n    /*YUKARIDAKI CONSTRUCTOR YAPISININ DAHA SADELESTIRILMIS HALI ICIN\r\n    YANI BIND YAPMAMAK ICIN\r\n    FONKSIYONU ARROW FUNCTION OLARAK YAZMALIYIZ*/\r\n    \r\n    state = {\r\n        counter: 0\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        console.log(\"ComponentDidMount\");\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"ComponentDidUpdate\")\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        console.log(\"componentWillUnmount\")\r\n    }\r\n\r\n\r\n    increase = () => {\r\n        this.setState({counter: this.state.counter + 1})\r\n    }\r\n\r\n\r\n    render() {\r\n        // console.log(\"Class Counter: \", this.state.counter)\r\n        return (\r\n            <div className=\"class\">\r\n                <h2>Class Component</h2>\r\n                <p>Counter: {this.state.counter}</p>\r\n                <button onClick={() => this.increase()}>Increase</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassComponent;\r\n","import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst FunctionalComponent = () => {\r\n    const inputRef = useRef(null);\r\n    const value = useRef(0);\r\n    console.log('value', value)\r\n\r\n\r\n  const [counter, setCounter] = useState(0);\r\n  const [text, setText] = useState(\"\");\r\n\r\n\r\n  /*useEffect, \r\n    bağımlılık arrayi verilmezse: componentDidUpdate gibi her renderda çalışır\r\n    boş bağımlılık arrayi verilirse: componentDidMount gibi çalışır\r\n    değişkene bağlı bağımlılık arrayi verilirse: değişken değiştikçe çalışır\r\n    return verilirse: return kısmı componentWillUnmount gibi çalışır.\r\n    yani component null olursa*/\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\"useEffect\");\r\n    //     /*timeout kullanılırsa clearTimout kullanılması gereken yer return*/\r\n    //     return () => \r\n    //     {\r\n    //         console.log(\"Function Component unmounted\")\r\n    //     }\r\n    // }, [counter])\r\n\r\n    /*useRef ile tutulan element değişince render edilmiyor.\r\n    render edilmesi için ona bağlı değişkenin useEffecte bağlanması gerekiyor.*/\r\n  useEffect(() => {\r\n    console.log(\"useEffect\");\r\n  },[counter])\r\n\r\n//   console.log(\"Func Counter: \", counter);\r\n\r\n// useEffect(() => {\r\n//     console.log(\"useEffect\");\r\n//     return () => {console.log(\"func comp unmount\")}\r\n// },[counter])\r\n\r\nconsole.log(\"Func Comp Rendered!\")\r\n\r\n  const increase = () => {\r\n      setCounter(counter + 1);\r\n      value.current = value.current + 1;\r\n  }\r\n\r\n  const changeBGColor = () => {\r\n      const color = inputRef.current.value;\r\n      inputRef.current.parentElement.style.backgroundColor = text;\r\n  }\r\n\r\n  const handleText = (e) => {\r\n      setText(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"function\">\r\n      <h2>Functional Component</h2>\r\n      <p>Counter: {counter}</p>\r\n      <button onClick={()=>setCounter(counter+1)}>Increase1</button>\r\n      <button onClick={() => increase()}>Increase2</button>\r\n      <hr />\r\n      <input type=\"text\" value={text}  ref={inputRef} onChange={handleText}/>\r\n      <button onClick={() => changeBGColor()}>BG Color</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FunctionalComponent;\r\n","import { useState } from \"react\";\r\n\r\nimport ClassComponent from \"./ClassComponent\";\r\nimport FunctionalComponent from \"./FunctionalComponent\";\r\n\r\nfunction App() {\r\n  const [isVisible, setVisible] = useState(true);\r\n  return (\r\n    <div className=\"App\">\r\n      {<button onClick={() => setVisible(!isVisible)}>Toggle</button> }\r\n      {true && <ClassComponent />}\r\n      {isVisible ? <FunctionalComponent /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}